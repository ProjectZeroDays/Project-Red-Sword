# scripts/test/test_vulnerability_assessment.py

import unittest
from scripts.vulnerability_assessment import fetch_cve_data, assess_vulnerabilities

class TestVulnerabilityAssessment(unittest.TestCase):

    def test_fetch_cve_data(self):
        """Test the fetch_cve_data function with a sample IP."""
        # You can use a mock response or a specific IP for testing
        ip = "192.168.1.1"
        cves = fetch_cve_data(ip)
        self.assertIsInstance(cves, list)  # Check if it returns a list

    def test_assess_vulnerabilities(self):
        """Test the assess_vulnerabilities function."""
        devices = [{'ip': '192.168.1.1'}, {'ip': '192.168.1.2'}]
        vulnerabilities = assess_vulnerabilities(devices)
        self.assertIsInstance(vulnerabilities, dict)  # Check if it returns a dictionary
        for device in devices:
            ip = device['ip']
            self.assertIn(ip, vulnerabilities)  # Ensure each device IP is in the results

if __name__ == "__main__":
    unittest.main()
