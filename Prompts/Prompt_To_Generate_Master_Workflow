Master Workflow Prompt

Intent of Use 

This project aims to create a master workflow and actions that analyze GitHub repositories and generate a custom set of GitHub workflows and actions tailored to complete various tasks automatically.
Initial Prompts to Create a Plan for GitHub Master Workflow and Actions Implementations

    1. Review Previous Interactions:
        - Analyze all previous related questions, prompts, requests, and responses to identify valuable pieces of code for integration.

    2. Feature Integration:
        - Integrate best features based on initial analysis.
        - Ensure GitHub Copilot seamlessly integrates with popular IDEs such as Visual Studio Code, Visual Studio, JetBrains IDEs (IntelliJ IDEA, PyCharm, WebStorm), Nano, EMACS, Atom, and Neovim.

    3. Automated Repository Management:
        - Badges and Visualizations:
            Add actions for the automatic intelligent addition of workflow badges, project status badges, social badges, and the generation of usage statistics, project goals, and implementation checklists.
        - Documentation Management:
            Add actions for the intelligent automatic creation and updating of file structure documentation, README.md, repository Wiki, and other documentation.
        - Database Management:
            Add actions for the automatic installation of dependencies, configuration, and table creation of databases when needed.

    4. Workflow Actions Management:
        - Setup and Management:
            Add actions for the automatic intelligent setup of GitHub Copilot CLI Integration, installation of dependencies, and configuration.
            Ensure continual automated processes for performance, resource management, logging, error handling, and source repository management.
        - Package Management:
            Add actions for the automatic generation of packages/assets, creation of new tags/releases, and linking of GitHub Packages to the repository.

    5. Real-time Code Suggestions:
        - Provide real-time code suggestions and error detection within the developer's preferred coding environment.

    6. Code Review and Analysis:
        - Advanced Tools:
            Add advanced code review tools for contextual analysis, debugging assistance, and spotting hidden bugs and errors.
        - AI-Powered Assistance:
            Integrate OpenAI Codex, Perplexity, Gemini, CodeGeeX, and AutoGPT for code review, corrections, and periodic review.
        - Continuous Improvement:
            Ensure periodic scanning and integration of best practices to enhance overall code quality.

    7. CI/CD Integration:
        - Optimization:
            Add actions for the intelligent management and seamless integration with existing CI/CD pipelines, optimization of workflows, and minimization of interference.
        - Continuous Deployment:
            Ensure AI-produced code passes quality checks and integrates with performance analysis tools.

    8. Main Focuses and Goals:
        - Ensure non-interference with existing workflows and maintain efficiency.
        - Add workflows to automate the processes ensuring seamless integration with CI/CD pipelines.
        - Optimize GitHub actions workflows for enhanced efficiency and minimal interference.
        - Continuously scan projects and make necessary adjustments for improved efficiency and effectiveness.
        - Add processes to request if the user would like to preserve exploits and security related tools and code excerpts to prevent their deletion or removal 
        - Generate custom workflows & actions specific to individual project needs and requirements & mind specific exemptions or exceptions added by the user
        - Request necessary API keys from the user for the master workflow to properly operate required components and optional components
        - Create custom project workflows that also prompt the user for required and optional API keys and credentials 
        - Update Documentation on added custom workflows, resources being used in them, processes carried out for seamless integration, and additional information

Subsequential Prompts to Finalize All Actions

    1. Conduct research and configure the usage of tools and workflows intelligently.
    2. Use best judgment for decision-making and conduct all code logic with full authority and focus on comprehensive solutions.
    3. Provide the updated master workflow, prompting users for API keys and other necessary inputs.
    4. nsure the master workflow generates custom workflows and actions tailored to each project, maintaining seamless integration and automation.

Additional Enhancements:

    1. Testing:
        - Automatically create comprehensive test cases, deploy tests before deployment, and generate table-driven tests.
        - Integrate with tools like Applitools for visual regression testing.
    2. Performance Analysis:
        - Provide advanced insights into CPU usage and detailed information about hot paths in the code.
    3. AI Tools Integration:
        - Provide support for SonarQube and DeepCode for code quality analysis and AI-powered code review.
    4. ML Tools Integration:
        - Support integration of PyTorch for machine learning projects when relevant.
